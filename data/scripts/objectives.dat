--[[ objectives.dat		23 Nov 2018

	This data file describes quests which are to be shown in the quest log menu. The quest
	can be either a "main" quest or a "side" quest, where they get listed separately. Each
	quest must define a dialog_id, which contains both the quest title and its description
	text. It must also define calc_phase, which determines the progress of the quest (i.e.
	the current phase value) based on the current state of save game variables (see below).

	The number of phases (subtasks) present in a quest is determined by the content of the
	dialog_id text, which is equal to the number of lines beginning with the '@' character
	(excluding whitespace). For more information on the content of the dialog construction
	and syntax, see scripts/objectives_manager.lua.

	Possible entries main{} and side{} have the same properties that can be defined:
	* dialog_id (string) - id of dialogs.dat entry that defines the title and description text
	* calc_phase (string or table) - Specifies save game variable(s) to determine the current phase
		(string) - name of save game variable to use. It can have the following values
			false/nil - the player has not yet started the quest
			0 - player started the quest but hasn't completed any objectives (subtasks)
			1 and up - the current phase, also equal to the number of subtasks completed
			Note: The number of phases in a quest is determined by the number of lines
			beginning with an '@' character. When the current phase is equal to the
			total number of phases, the quest is marked as complete.
		(table) - contains as table indicies any number of save game variable names (strings)
		whose values get passed to the custom callback function, which returns what the current
		phase currently is. Keys are the following:
			1 and up (string)- any number of save game variable names needed by the callback function
			callback (function) - callback function that returns the current phase based on
			the save game variable values that are passed back as a table in the first argument.
			It has the following arguments:
				args (table) - contains as indicies values for the save game variables listed above
				It also has the following special keys that can be accessed:
					num_phases (number) - the total number of phases for this quest --TODO not yet implemented
			It has the following return values:
				(number or nil/false) - what phase this quest should be set to (0 and up)
					value of false means the player has not started the quest yet
	* location (string or table, optional) - string.dat key(s) to specify the location text to show for this mission
		(string) - strings.dat key to use for the location text for all phases
		(table) - list of strings.dat keys to use each phase, where the index corresponds to the phase.
			Values of true repeat the location of the previous phase
			Values of false use an empty string as the location for that phase
			Note: the location specified in index 1 would be shown in the quest log from
			when the player starts the quest until beginning phase 1. When the quest is
			complete, the location from the last phase will continue to be shown.
		default: location text will not be shown for any phase
	* replace_s
	* replace_v
	* show_at_start (boolean, optional) - The player begins a new game with this quest already in their quest log (default: false)
	]]

	--## Examples of Variable Substitution Values and Strings ##--
	--[=[

	Take the following description string:
	[[
	Collect all the shards ($v1 of 3 found)

	Good luck, $v2
	]]

	A simple substitution would be as follows:
	replace_v = {
		"num_shards_collected", --value is number 0 to 3
		"player_name", --value is a string
	}

	There is no callback function specified in this case, so the save game values are used
	directly for the substitution. $v1 becomes the the number of shards that are collected
	by the player, and $v2 becomes the player's name. Note that since the player will have
	chosen their own name, it does not need to be localized. Ensure that the length of the
	players name won't exceed the line's max character count.

	Here is a more complicated substitution using a custom function:
	[[
	Kill 10 monsters ($v1 remaining)

	$v2 of $v3 subtasks complete
	]]

	The custom function for the substitution would be specified as follows:
	replace_v = {
		"monsters_killed", --value is a number
		callback = function(args)
			local num_monsters_killed = args[1] --current value of first savegame variable
			local monsters_remaining = 10 - num_monsters_killed

			return {
				math.max(monsters_remaining, 0), --ensure number is not negative
				args.phase, --current phase, equals number of subtasks that are complete
				args.num_phases, --total number of phases (subtasks) in this quest
			}
		end
	}

	So some arithmetic is used to convert the number of monsters killed into the number of
	monsters remaining. The current phase and the total number of phases are available for
	the callback function as well.

	And finally, an example of substituting for string values from strings.dat:
	[[
	Peter is looking for a new fishing rod.

	$s1

	You $s2 enough coins.
	]]

	replace_s = {
		"bought_fishing_rod", --value is true or false
		"number_of_coins", --value is a number
		callback = function(args)
			return {
				args[1] and "quest.finding_rod" or "quest.finding_peter",
				args[2]>=50 and "quest.have_enough" or "quest.not_enough",
			}
		end
	}

	--strings.dat
	text{key="quest.finding_rod", value="You can buy a fishing rod at the general store."}
	text{key="quest.finding_peter", value="You can find Peter at the pier"}
	text{key="quest.have_enough", value="have"}
	text{key="quest.not enough", value="do not have"}

	Since substituted strings need localization, the callback function returns strings.dat
	keys this time instead of the direct string to be substituted. $s1 gets substituted by
	a full line of text depending on whether the player obtained the fishing rod yet. Then
	depending on whether the player has enough coins, $s2 becomes "do not have" or "have".

	Note that it is possible for a $s substitution to include $v in the substitution text,
	which would then go through a second substitution. If a $s substitution has another $s
	in the substituted text, it must only substitute for a higher value of $s than itself.
	For example, $s2 could substitute for $s3, but not for a second $s.
]=]

main{
	dialog_id = "quest.main.limestone.get_whisky",
	calc_phase = "quest_whisky_for_juglan_phase",
	location = "location.limestone_island",
}

main{
	dialog_id = "quest.main.limestone.meet_juglan_at_pier",
	location = "location.limestone_island",
	calc_phase = "quest_meet_juglan_at_pier"
}

main{
	dialog_id = "quest.main.kelpton",
	location = "location.ballast_harbor",
	calc_phase = "quest_kelpton",
}

main{
    dialog_id = "quest.main.spruce_head",
    calc_phase = "quest_spruce_head",
    location = "location.goatshead_island",
    replace_v = {
        "spruce_head_shirine_num_fountains_activated"
    }
}

main{
	dialog_id = "quest.main.hourglass_fort",
	calc_phase = "quest_hourglass_fort",
	location = "location.yarrowmouth"
}

main{
	dialog_id = "quest.main.hazel",
	calc_phase = "quest_hazel",
	location = "location.oakhaven"
}

main{
    dialog_id = "quest.main.tidal_starfruit",
    calc_phase = "quest_tidal_starfruit",
    location = "location.oakhaven"
}

main{
    dialog_id = "quest.main.pirate_fort",
    calc_phase = "quest_pirate_fort",
    location = "location.oakhaven"
}

main{
    dialog_id = "quest.main.snapmast",
    calc_phase = "quest_snapmast",
    location = "location.snapmast"
}

main{
	dialog_id = "quest.main.isle_of_storms",
	calc_phase = "quest_isle_of_storms"
}

main{
	dialog_id = "quest.main.mangrove_sword",
	calc_phase = "quest_mangrove_sword",
	location = "location.oakhaven",
}

main{
    dialog_id = "quest.main.monkshood",
    calc_phase = "quest_monkshood",
    location = "location.oakhaven"
}



side{
	dialog_id = "quest.test13",
	calc_phase = "quest_test13",
	location = "location.goatshead_island"
}

side{
    dialog_id = "quest.side.goatshead.secret_tunnels",
    calc_phase = "quest_goatshead_secret_tunnels",
    location = "location.goatshead_harbor"
}

side{
    dialog_id = "quest.side.goatshead.phantom_squid",
    calc_phase = "quest_phantom_squid",
    location = "location.goatshead_harbor"
}

side{
    dialog_id = "quest.side.goatshead.phantom_squid_part_2",
    calc_phase = "quest_phantom_squid_contracts",
    location = "location.goatshead_harbor"
}

side{
	dialog_id = "quest.side.bomb_arrows",
	calc_phase = "quest_bomb_arrows",
}

side{
    dialog_id = "quest.side.crabhook.monster",
    calc_phase = "quest_crabhook_shoal_monster",
    location = "location.crabhook_village"
}

side{
	dialog_id = "quest.side.crabhook.dusit",
	calc_phase = "quest_dusit",
	location = "location.crabhook"
}

side{
    dialog_id = "quest.side.ballast_harbor.lost_key",
    calc_phase = "quest_ballast_harbor_lost_inn_key"
}

side{
    dialog_id = "quest.side.ballast_harbor.hornet_honey",
    calc_phase = "quest_ballast_harbor_hornet_honey",
    location = "location.tern_marsh"
}

side{
    dialog_id = "quest.side.yarrowmouth.parley",
    calc_phase = "quest_yarrow_parley"
}

side{
    dialog_id = "quest.side.yarrowmouth.stone_beak",
    calc_phase = "quest_stone_beak",
    location = "location.yarrowmouth"
}

side{
    dialog_id = "quest.side.yarrowmouth.iron_pinecone",
    calc_phase = "quest_iron_pine_cone",
    location = "location.yarrowmouth"
}

side{
    dialog_id = "quest.side.yarrowmouth.meadery",
    calc_phase = "quest_briarwood_mushrooms",
    location = "location.yarrowmouth"
}

side{
    dialog_id = "quest.side.oakhaven.orange_thief",
    calc_phase = "quest_tic_tac_toe",
    location = "location.oakhaven"
}

side{
    dialog_id = "quest.side.oakhaven.musicians",
    calc_phase = "quest_oakhaven_musicians",
    location = "location.oakhaven"
}

side{
    dialog_id = "quest.side.ferris_tools",
    calc_phase = "quest_ferris_tools"
}

side{
    dialog_id = "quest.side.goatshead.poplar_shack_key",
    calc_phase = "quest_poplar_shack_lost_key",
    location = "location.goatshead_island"
}

side{
    dialog_id = "quest.side.oakhaven.sinking_lighthouse",
    calc_phase = "quest_seaglint_ruins_lighthouse",
    location = "location.oakhaven"
}

side{
	dialog_id = "quest.side.oakhaven.manna_oaks",
	calc_phase = "quest_manna_oaks",
	location = "location.oakhaven",
    replace_v = {
		"manna_oaks_investigated"
    }
}

side{
	dialog_id = "quest.side.oakhaven.master_thief",
	calc_phase = "quest_mayors_dog",
	location = "location.oakhaven"
}

side{
	dialog_id = "quest.side.heron_well",
	calc_phase = "quest_heron_well",
	location = "location.goatshead_island"
}

side{
	dialog_id = "quest.side.lighthouses",
	calc_phase = "quest_lighthouses",
	replace_v = {
		"lighthouses_quest_num_lit"
	}
}
