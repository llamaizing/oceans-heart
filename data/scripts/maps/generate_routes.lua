--[[ generate_routes.lua
	version 1.0
	28 Dec 2019
	GNU General Public License Version 3
	author: Llamazing

	   __   __   __   __  _____   _____________  _______
	  / /  / /  /  | /  |/  /  | /__   /_  _/  |/ / ___/
	 / /__/ /__/ & |/ , ,  / & | ,:',:'_/ // /|  / /, /
	/____/____/_/|_/_/|/|_/_/|_|_____/____/_/ |_/____/

	This script analyzes paths on the images in the SOURCE_IMG_DIR directory and generates
	a data file at OUTPUT_DATA_PATH with the steps of each path, which is used to create a
	path movement for a boat sprite on the fast travel menu. The game only uses the output
	data file (and not the source images), so this operation is only performed once during
	the game's development (unless the source image files are modified and needs to be run
	again).
	
	The source image files should each contain exactly one path. The start of the path has
	a green pixel {0, 255, 0}, followed by an unbroken path of blue pixels {0, 0 255} (the
	path must not cross itself, and diagonal movements are allowed), and terminated with a
	red pixel {255, 0, 0}.
	
	The source image files should be named "abc_xyz.png", where the first 3 letters of the
	starting port's name are "abc", and the first 3 letters of the destination port's name
	are "xyz". If the image file for a given route is not found, then the inverse route is
	used instead with the route data reversed.
	
	NOTE: This script does not have write access to the Solarus data directory, so instead
	it will write the output .dat file to the Solarus write directory (where the save game
	can be found). The output .dat file needs to be manually moved to its correct location
	in the Solarus data directory in order to be used.
	
	Usage:
	--run this command in the console during game development to generate the data file
	require"scripts/maps/generate_routes"()
]]

local line2path = require"scripts/line2path"

local SOURCE_IMG_DIR = "sprites/menus/maps/routes/"
local OUTPUT_DATA_PATH = "fast_travel.dat"
local PORT_NAMES = { --These are the port names used by the fast travel menu
	"ivystump",
	"yarrowmouth",
	"snapmast",
	"oakhaven",
	"goatshead_harbor",
	"isle_of_storms",
	"kingsdown",
	"spruce_head",
	"limestone_island",
	"zephyr_bay",
	"ballast_harbor",
}
local SHORT_NAMES = {} --first 3 letters of each port name
for i,port_name in ipairs(PORT_NAMES) do SHORT_NAMES[i] = port_name:sub(1,3) end

local function generate_routes()
	--## Generate data table of all paths from source images
	
	local data = {}
	for _,start_port_name in ipairs(PORT_NAMES) do data[start_port_name] = {} end
	
	for i_start,start_port_name in ipairs(PORT_NAMES) do
		for i_end,end_port_name in ipairs(PORT_NAMES) do
			if i_start ~= i_end then
				local file_path = string.format(
					"menus/maps/routes/%s_%s.png",
					SHORT_NAMES[i_start],
					SHORT_NAMES[i_end]
				)
				
				local path = line2path(file_path)
				if path then
					--generate reverse route if it doesn't already exist
					local reverse_path = data[end_port_name][start_port_name]
					if not reverse_path then
						reverse_path = {x=path.x_end, y=path.y_end} --start at the end
						for i = #path, 1, -1 do
							local direction = path[i]
							if direction <= 7 then --larger values are wait delays
								direction = direction + (direction<4 and 4 or -4) --reverse the direction
							end
							reverse_path[#reverse_path + 1] = direction
						end
						
						data[end_port_name][start_port_name] = reverse_path
					end
					
					data[start_port_name][end_port_name] = path
				end
			end
		end
	end
	
	
	--## write the .dat file
	
	local output = { --(table, array) entry for each line of output .dat file
		string.format(
			"--data file generated by generate_routes.lua (%s)\nreturn {",
			os.date"!%c"
		)
	}

	for start_port_name,ports in pairs(data) do
		table.insert(output, string.format("\t[%q] = {", start_port_name))
		for end_port_name,path in pairs(ports) do
			table.insert(output, string.format(
				"\t\t[%q] = {\n\t\t\tx = %d, y = %d,\n\t\t\t%s\n\t\t},",
				end_port_name, path.x, path.y, table.concat(path,",")
			))
		end
		table.insert(output, "\t},")
	end
	table.insert(output, "}\n")
	
	local file = sol.file.open(OUTPUT_DATA_PATH, "w")
    file:write(table.concat(output,"\n"))
    file:flush()
    file:close()
end

return generate_routes

--[[ Copyright 2019 Llamazing
  [] 
  [] This program is free software: you can redistribute it and/or modify it under the
  [] terms of the GNU General Public License as published by the Free Software Foundation,
  [] either version 3 of the License, or (at your option) any later version.
  [] 
  [] It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  [] without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  [] PURPOSE.  See the GNU General Public License for more details.
  [] 
  [] You should have received a copy of the GNU General Public License along with this
  [] program.  If not, see <http://www.gnu.org/licenses/>.
  ]]
